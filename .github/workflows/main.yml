name: Portfolio deploy master

on: 
  push:
    branches: 
    - main


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_STAGE: test
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create datetime output
      id: datetime
      run: echo "::set-output name=datetime::$(date +'%Y-%m-%d_%H-%M-%S')"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        aws-region: eu-central-1

    - name: Build C# Lambda & upload to S3
      env: 
        S3_BUCKET: "learning.functions"
        ZIP_FILE: "lambda.zip"
        ZIP_FILE_ARCHIVE: "lambda_${{steps.datetime.outputs.datetime}}.zip"
        API_ID: "***"
      run: |
        echo "## Build -----------------------------------------------------------------------"
        cd src
        dotnet publish Learning.csproj -c RELEASE -o publish

        echo
        echo "## Unit Tests"
        dotnet test UnitTests/UnitTests.fsproj -c Release --filter "TestCategory!=SKIP_ON_DEPLOY"
        
        echo
        echo "## Zip -----------------------------------------------------------------------"
        cd ./publish
        zip -r ${ZIP_FILE} ./*
       
        echo
        echo "## Create backup -----------------------------------------------------------------------" 
        if [[ ! -z "$(aws s3 ls s3://${S3_BUCKET}/${ZIP_FILE})" ]] ; then
          echo "remove previous"
          aws s3 rm s3://${S3_BUCKET}/ --recursive --exclude "${ZIP_FILE}"
          echo "create a copy, archive"
          aws s3 cp s3://${S3_BUCKET}/${ZIP_FILE} s3://${S3_BUCKET}/${ZIP_FILE_ARCHIVE}
          aws s3 rm s3://${S3_BUCKET}/${ZIP_FILE}
        fi

        echo
        echo "## Copy new zip file -----------------------------------------------------------------------"
        aws s3 cp ./${ZIP_FILE} s3://${S3_BUCKET}

        echo
        echo "## Publish Lambda -----------------------------------------------------------------------"
        # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/publish-version.html
        # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/publish-layer-version.html

        # aws lambda publish-version --function-name learning_getRandomNumber

        #aws lambda publish-layer-version \
        #  --layer-name layer-1 \
        #  --content "S3Bucket=${S3_BUCKET},S3Key=${ZIP_FILE}" \

        # function must exists
        aws lambda update-function-code \
          --function-name learning_getRandomNumber \
          --s3-bucket ${S3_BUCKET} \
          --s3-key ${ZIP_FILE}

        echo
        echo "## API Gateway setup -----------------------------------------------------------------------"
        api_name=Learning
        #API=${API_ID}
        apis=$(aws apigateway get-rest-apis --query "items[?name=='Learning']")
        echo $apis
        api_id=$(echo $apis | jq ".[].id")
        echo api id=$api_id
        #aws apigateway get-resources --rest-api-id $API

        echo
        echo "## Create bucket for serverless ------------------------------------------------------------"
        # forse bucket creation
        #aws s3api create-bucket --acl private --bucket learning-portfolio-functions \
        #  --create-bucket-configuration LocationConstraint=${AWS_REGION}
        # use head-bucket --bucket https://docs.aws.amazon.com/cli/latest/reference/s3api/head-bucket.html
        #if [[ ! -z "$(aws s3 ls s3://learning-portfolio-functions)" ]] ; then
        #  echo "create bucket"
        #  aws s3api create-bucket --acl private --bucket learning-portfolio-functions \
        #    --create-bucket-configuration LocationConstraint=${AWS_REGION}
        #fi

    - name: Serverless Portfolio
      uses: serverless/github-action@master
      with:
        args: deploy --config ./src/Serverless/portfolio.yml --stage ${{env.AWS_STAGE}} --region ${{env.AWS_REGION}}

