name: Portfolio deploy master

on: 
  push:
    branches: 
    - main


jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create datetime output
      id: datetime
      run: | 
        echo "::set-output name=date::$(date +'%Y-%m-%d')"
        echo "::set-output name=datetime::$(date +'%Y-%m-%d_%H-%M-%S')"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        aws-region: eu-central-1

    - name: Build C# Lambda & upload to S3
      env: 
        S3_BUCKET: "learning.functions"
        ZIP_FILE: "function_CSharp_GetRandom.zip"
        ZIP_FILE_ARCHIVE: "function_CSharp_GetRandom_${{steps.datetime.outputs.datetime}}.zip"
      run: |        
        echo # Build
        cd src
        dotnet publish -c RELEASE -o publish       
        #ls ./publish
        
        echo # Zip
        cd ./publish
        # zip could need -recursive
        zip -r ${ZIP_FILE} ./*
       
        echo # Check previous file...
        # exists=       
        echo ...end
        if [[ ! -z "$(aws s3 ls s3://${S3_BUCKET}/${ZIP_FILE})" ]] ; then
          echo # Create a copy (archive)
          aws s3 cp s3://${S3_BUCKET}/${ZIP_FILE} s3://${S3_BUCKET}/${ZIP_FILE_ARCHIVE}
          aws s3 rm s3://${S3_BUCKET}/${ZIP_FILE}
        fi

        echo # Copy new zip file
        aws s3 cp ./${ZIP_FILE} s3://${S3_BUCKET}

        echo # Publish Lambda
        # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/publish-version.html
        # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/publish-layer-version.html

        aws lambda publish-version --function-name learning_getRandomNumber

        #aws lambda publish-layer-version \
        #  --layer-name "$()" \
        #  --content "S3Bucket=$(S3BucketName),S3Key=$(S3SharedNodeRuntimePrefix).zip" \
        #  --description "Shared Node.js runtime" \
        #  --compatible-runtimes nodejs10.x

        # https://s3.amazonaws.com/learning.functions/function_CSharp_GetRandom.zip
        # LambdaTest::LambdaTest.LambdaHandler::handleRequest


# TEMP COMMENT
#    - name: Serverless deploy
#      uses: serverless/github-action@master
#      with: 
#        args: deploy
##      env: 
##        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}

